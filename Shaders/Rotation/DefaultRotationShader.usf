#include "/Engine/Private/Common.ush"
#include "../Common.ush"

RWStructuredBuffer<float4x4> InstanceTransformBuffer;
StructuredBuffer<float4x4> InitialTransformBuffer;

[numthreads(128, 1, 1)]
void DefaultRotationCS(uint3 ThreadId : SV_DispatchThreadID)
{
	const float4x4 InfluencerTransform = DefaultRotationShaderUniform.InfluencerTransform;
	const float4x4 ModelTransform      = DefaultRotationShaderUniform.ModelTransform;
	const float3   TranslationInertia  = DefaultRotationShaderUniform.TranslationInertia;
	const float3   RotationInertia     = DefaultRotationShaderUniform.RotationInertia;
	const float3   ScaleInertia        = DefaultRotationShaderUniform.ScaleInertia;
    
	const uint Index = ThreadId.x;
	uint Size, Stride;
	InstanceTransformBuffer.GetDimensions(Size, Stride);
    
	if (Index < Size)
	{
		float4x4 InitialLocalTransform  = transpose(InitialTransformBuffer[Index]);
		float4x4 InstanceLocalTransform = transpose(InstanceTransformBuffer[Index]);
		
		float3 InitialT, InitialS;
		float3 InstanceT, InstanceS;
		
		float4 InitialR;
		float4 InstanceR;
        
		decompose(InitialLocalTransform, InitialT, InitialR, InitialS);
		decompose(InstanceLocalTransform, InstanceT, InstanceR, InstanceS);
		
		// TODO: figure out how to apply slerp alpha from Eular angles to quaternions
		InstanceR = q_slerp(InstanceR, InitialR, RotationInertia.x);
		
		//InstanceTransformBuffer[Index] = compose(InstanceT, InstanceR, InstanceS);
	}
}